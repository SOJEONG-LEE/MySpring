<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521/XE" />
		<!-- Oracle Database 18c -->
		<!-- <property name="url" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" /> -->
		<!-- Oracle Database 11g -->
		<property name="url" value="jdbc:oracle:thin:@localhost:1521/XEPDB1" />
		<property name="username" value="mytest" />
		<property name="password" value="mytest" />
	</bean>

	<!-- aspect annotation -->
	<context:component-scan base-package="tommy.spring.web"></context:component-scan>
	<aop:aspectj-autoproxy />


	<!-- aspect -->
	<!-- <context:component-scan base-package="tommy.spring.web"></context:component-scan> 
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy> <bean id="log" class="tommy.spring.web.common.Log4jAdvice"></bean> 
		<bean id="before" class="tommy.spring.web.common.BeforeAdvice"></bean> <bean 
		id="afterReturning" class="tommy.spring.web.common.AfterReturningAdvice"></bean> 
		<bean id="afterThrowing" class="tommy.spring.web.common.AfterThrowingAdvice"></bean> 
		<bean id="after" class="tommy.spring.web.common.AfterAdvice"></bean> <bean 
		id="around" class="tommy.spring.web.common.AroundAdvice"></bean> <aop:config> 
		<aop:pointcut expression="execution(* tommy.spring.web..*Impl.*(..))" id="allPointcut" 
		/> <aop:pointcut expression="execution(* tommy.spring.web..*Impl.get*(..))" 
		id="getPointcut"/> <aop:aspect ref="afterThrowing"> <aop:after-throwing method="exceptionLog" 
		pointcut-ref="allPointcut" throwing="e"/> </aop:aspect> <aop:aspect ref="afterReturning"> 
		<aop:after-returning method="afterLog" pointcut-ref="getPointcut" returning="returnObj"/> 
		</aop:aspect> <aop:aspect ref="around"> <aop:around method="aroundLog" pointcut-ref="getPointcut"/> 
		</aop:aspect> <aop:aspect ref="after"> <aop:after method="finallyLog" pointcut-ref="allPointcut"/> 
		</aop:aspect> <aop:aspect ref="afterThrowing"> <aop:after-throwing method="exceptionLog" 
		pointcut-ref="allPointcut"/> </aop:aspect> <aop:aspect ref="afterReturning"> 
		<aop:after-returning method="afterLog" pointcut-ref="getPointcut"/> </aop:aspect> 
		<aop:aspect ref="before"> <aop:before method="beforeLog" pointcut-ref="getPointcut"/> 
		</aop:aspect> <aop:aspect ref="log"> <aop:after method="printLogging" pointcut-ref="allPointcut" 
		/> </aop:aspect> </aop:config> -->


	<!-- BoardService -->
	<!-- <context:component-scan base-package="tommy.spring.web"></context:component-scan> 
		<bean id="userService" class="tommy.spring.web.user.impl.UserServiceImpl"> 
		<property name="userDAO" ref="userDAO" /> </bean> <bean id="userDAO" class="tommy.spring.web.user.impl.UserDAO"></bean> -->


	<!-- Bean LifeCycle -->
	<!-- <bean id="myLifeBean" class="tommy.spring.lifecycle.MyLifeBeanImpl" 
		init-method="init"> <property name="greeting"> <value>Hello, </value> </property> 
		</bean> <bean class="tommy.spring.lifecycle.CustomBeanPostProcessor" /> -->


	<!-- Component Annotation -->
	<!-- <context:component-scan base-package="tommy.spring.polymorphism"> </context:component-scan> 
		<bean id="apple" class="tommy.spring.polymorphism.AppleSpeaker"/> -->


	<!-- Bean -->
	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" init-method="start" 
		destroy-method="stop"/> -->
	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" lazy-init="true"/> -->
	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" scope="singleton"/> -->
	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" scope="prototype"/> -->


	<!-- Constructor injection -->
	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" > -->
	<!-- <constructor-arg index="0" ref="apple"></constructor-arg> <constructor-arg 
		index="1" value="3000000"></constructor-arg> -->
	<!-- <constructor-arg><ref bean="apple"/></constructor-arg> <constructor-arg 
		value="3000000"></constructor-arg> -->


	<!-- Setter injection -->
	<!-- <property name="speaker" ref="apple"></property> <property name="price" 
		value="3000000"></property> -->

	<!-- <bean id="tv" class="tommy.spring.polymorphism.SamsungTV" p:speaker-ref="apple" 
		p:price="2800000"> </bean> <bean id="sony" class="tommy.spring.polymorphism.SonySpeaker"/> 
		<bean id="apple" class="tommy.spring.polymorphism.AppleSpeaker"/> -->


	<!-- Collectors -->
	<!-- <bean id="collectionBean" class="tommy.spring.collection.CollectionBean"> 
		<property name="addressList"> <list> <value>서울시 서초구 서초동</value> <value>서울시 
		동대문구 장안동</value> <value>경기도 군포시 당동</value> </list> <map> <entry> <key><value>홍길동</value></key> 
		<value>율도국</value> </entry> <entry> <key><value>손오공</value></key> <value>화과산</value> 
		</entry> </map> <props> <prop key="홍길동">율도국</prop> <prop key="손오공">화과산</prop> 
		</props> set 타입에 generic으로 명시되어 있지 않으면 value-type="java.lang.String" 넣어야한다. 
		<set value-type="java.lang.String"> <value>서울시 서초구 서초동</value> <value>서울시 
		동대문구 장안동</value> <value>서울시 동대문구 장안동</value> <value>서울시 동대문구 장안동</value> 
		<value>경기도 군포시 당동</value> </set> </property> </bean> -->

</beans>
